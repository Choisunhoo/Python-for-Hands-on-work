# 004 BeautifulSoup 객체 만들기
# requests 모듈을 불러온다. 그리고 bs4(beautifulsoup4) 라이브러리에서 BeautifulSoup 클래스를 불러온다
import requests
from bs4 import BeautifulSoup
import sys
import io

sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding = 'utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.detach(), encoding = 'utf-8')

# 위키피디아 웹 페이지 주소 URL을 변수 url에 할당한다
url = "https://en.wikipedia.org/wiki/Seoul_Metropolitan_Subway"
# 웹서버에 GET 요청을 보내고, 웹 서버가 응답한 객체를 변수 resp에 저장한다. 응답 객체의 text 속성에서 HTML 소스코드를 추출하여 변수 html_src에 할당한다.
resp =  requests.get(url)
html_src= resp.text

# BeautifulSoup 함수는 매개변수로 전달받은 HTML 소스코드를 해석하여 BeautifulSoup 객체를 생성하낟. 이때, HTML을 파싱(해석)하는 적절한 구문 해석기(파서, parser)를 함께 입력해야한다. 예제에서는 'html.parser' 파서를 사용한다 
soup = BeautifulSoup(html_src, 'html.parser')
#  변수 soup이 저장하고 있는 BeautifulSoup 객체의 자료형을 출력한다. bs4 라이브러리에서 불러온 BeautifulSoup 클래스라는 것을 확인할 수 있다. 
print(type(soup))
print("\n")

# HTML 웹 문서의 "head" 태그(<head> --- </head> 부분)에 해당하는 내용이 출력된다
print(soup.head)
print("\n")

# HTML 웹 문서의 "body" 태그(<body> --- </body> 부분)에 해당하는 내용이 출력된다
print(soup.body)
print("\n")

# HTML 웹 문서의 "title" 태그 내용을 출력된다
print('title 태그 요소: ', soup.title)

# name 속성을 지정하여 HTML 태그의 이름을 따로 추출한다.
print('title 태그 이름: ', soup.title.name)

# string 속성을 지정하여 HTML 태그를 제외하고 태그 안에 표시되는 문자열(텍스트)만 따로 추출한다.
print('title 태그 요소: ', soup.title.string)
